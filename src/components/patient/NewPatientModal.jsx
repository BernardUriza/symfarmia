"use client"; import React, { useState } from 'react';
import { X, User, Mail, Phone, Calendar, FileText, UserCheck, CheckCircle, AlertCircle
} from 'lucide-react'; const NewPatientModal = ({ isOpen, onClose, onSave, isLoading = false }) => { const [formData, setFormData] = useState({ name: '', email: '', phone: '', information: '', dateOfBirth: '', gender: '', status: 'Activo' }); const [errors, setErrors] = useState({}); const handleChange = (field, value) => { setFormData(prev => ({ ...prev, [field]: value })); // Clear error when user starts typing if (errors[field]) { setErrors(prev => ({ ...prev, [field]: null })); } }; const validateForm = () => { const newErrors = {}; if (!formData.name.trim()) { newErrors.name = 'El nombre es requerido'; } if (!formData.email.trim()) { newErrors.email = 'El correo electrónico es requerido'; } else if (!/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(formData.email)) { newErrors.email = 'El formato del correo electrónico no es válido'; } if (!formData.phone.trim()) { newErrors.phone = 'El teléfono es requerido'; } if (!formData.dateOfBirth) { newErrors.dateOfBirth = 'La fecha de nacimiento es requerida'; } if (!formData.gender) { newErrors.gender = 'El género es requerido'; } setErrors(newErrors); return Object.keys(newErrors).length === 0; }; const handleSubmit = (e) => { e.preventDefault(); if (!validateForm()) { return; } // Format date for consistency const submitData = { ...formData, dateOfBirth: new Date(formData.dateOfBirth) }; onSave(submitData); }; const handleClose = () => { setFormData({ name: '', email: '', phone: '', information: '', dateOfBirth: '', gender: '', status: 'Activo' }); setErrors({}); onClose(); }; if (!isOpen) return null; return ( <div className="fixed inset-0 bg-black/50 backdrop-blur-sm flex items-center justify-center z-50 p-4 opacity-100 @starting-style:opacity-0 transition-opacity duration-300 ease-out"> <div className="bg-white rounded-2xl shadow-2xl w-full max-w-2xl max-h-[90vh] overflow-hidden scale-100 translate-y-0 @starting-style:scale-95 @starting-style:translate-y-4 transition-all duration-300 ease-out border border-gray-200/50 relative"> {/* Gradient overlay */} <div className="absolute inset-0 bg-gradient-to-br from-medical-primary/5 to-medical-accent/5 pointer-events-none rounded-2xl"></div> {/* Header */} <div className="flex items-center justify-between p-6 border-b border-gray-200/50 relative z-10"> <div className="flex items-center space-x-3"> <div className="w-10 h-10 bg-gradient-to-br from-medical-primary/20 to-medical-accent/20 rounded-xl flex items-center justify-center shadow-inner"> <User className="h-5 w-5 text-medical-primary" /> </div> <div> <h2 className="text-xl font-semibold bg-gradient-to-r from-medical-primary to-medical-accent bg-clip-text text-transparent"> Nuevo Paciente </h2> <p className="text-sm text-gray-600"> Registrar un nuevo paciente en el sistema </p> </div> </div> <button onClick={handleClose} className="group p-2 rounded-lg text-gray-400 hover:text-gray-600 hover:bg-gray-100 transition-all duration-300" disabled={isLoading} > <X className="h-6 w-6 transform group-hover:rotate-90 transition-transform duration-300" /> </button> </div> {/* Form */} <form onSubmit={handleSubmit} className="p-6 space-y-6 overflow-y-auto max-h-[calc(90vh-140px)] relative z-10 scrollbar-medical"> {/* Status and Basic Info Row */} <div className="grid grid-cols-1 md:grid-cols-2 gap-6"> <div> <label className="block text-sm font-medium text-gray-700 mb-2"> <UserCheck className="inline h-4 w-4 mr-1" /> Estado </label> <select value={formData.status} onChange={(e) => handleChange('status', e.target.value)} className="w-full p-3 border-2 border-gray-200 rounded-xl bg-white text-gray-900 focus:border-medical-primary focus:ring-4 focus:ring-medical-primary/20 transition-all duration-300 hover:border-gray-300" disabled={isLoading} > <option value="Activo">Activo</option> <option value="Archivado">Archivado</option> </select> </div> <div> <label className="block text-sm font-medium text-gray-700 mb-2"> <User className="inline h-4 w-4 mr-1" /> Nombre Completo * </label> <input type="text" value={formData.name} onChange={(e) => handleChange('name', e.target.value)} className={`input-medical ${ errors.name ? 'border-red-500 focus:border-red-500 focus:ring-red-500/20' : '' }`} placeholder="Ingresa el nombre completo" disabled={isLoading} /> {errors.name && ( <p className="mt-1 text-sm text-red-600 flex items-center"> <AlertCircle className="h-4 w-4 mr-1" /> {errors.name} </p> )} </div> </div> {/* Contact Info */} <div className="grid grid-cols-1 md:grid-cols-2 gap-6"> <div> <label className="block text-sm font-medium text-gray-700 mb-2"> <Mail className="inline h-4 w-4 mr-1" /> Correo Electrónico * </label> <input type="email" value={formData.email} onChange={(e) => handleChange('email', e.target.value)} className={`w-full p-3 border rounded-lg bg-white text-gray-900 focus:ring-2 focus:ring-blue-500 focus:border-blue-500 ${ errors.email ? 'border-red-500' : 'border-gray-300' }`} placeholder="ejemplo@correo.com" disabled={isLoading} /> {errors.email && ( <p className="mt-1 text-sm text-red-600 flex items-center"> <AlertCircle className="h-4 w-4 mr-1" /> {errors.email} </p> )} </div> <div> <label className="block text-sm font-medium text-gray-700 mb-2"> <Phone className="inline h-4 w-4 mr-1" /> Teléfono * </label> <input type="tel" value={formData.phone} onChange={(e) => handleChange('phone', e.target.value)} className={`w-full p-3 border rounded-lg bg-white text-gray-900 focus:ring-2 focus:ring-blue-500 focus:border-blue-500 ${ errors.phone ? 'border-red-500' : 'border-gray-300' }`} placeholder="123-456-7890" disabled={isLoading} /> {errors.phone && ( <p className="mt-1 text-sm text-red-600 flex items-center"> <AlertCircle className="h-4 w-4 mr-1" /> {errors.phone} </p> )} </div> </div> {/* Birth Date and Gender */} <div className="grid grid-cols-1 md:grid-cols-2 gap-6"> <div> <label className="block text-sm font-medium text-gray-700 mb-2"> <Calendar className="inline h-4 w-4 mr-1" /> Fecha de Nacimiento * </label> <input type="date" value={formData.dateOfBirth} onChange={(e) => handleChange('dateOfBirth', e.target.value)} className={`w-full p-3 border rounded-lg bg-white text-gray-900 focus:ring-2 focus:ring-blue-500 focus:border-blue-500 ${ errors.dateOfBirth ? 'border-red-500' : 'border-gray-300' }`} disabled={isLoading} /> {errors.dateOfBirth && ( <p className="mt-1 text-sm text-red-600 flex items-center"> <AlertCircle className="h-4 w-4 mr-1" /> {errors.dateOfBirth} </p> )} </div> <div> <label className="block text-sm font-medium text-gray-700 mb-2"> <User className="inline h-4 w-4 mr-1" /> Género * </label> <select value={formData.gender} onChange={(e) => handleChange('gender', e.target.value)} className={`w-full p-3 border rounded-lg bg-white text-gray-900 focus:ring-2 focus:ring-blue-500 focus:border-blue-500 ${ errors.gender ? 'border-red-500' : 'border-gray-300' }`} disabled={isLoading} > <option value="">Seleccionar género</option> <option value="Male">Masculino</option> <option value="Female">Femenino</option> <option value="Other">Otro</option> </select> {errors.gender && ( <p className="mt-1 text-sm text-red-600 flex items-center"> <AlertCircle className="h-4 w-4 mr-1" /> {errors.gender} </p> )} </div> </div> {/* Additional Information */} <div> <label className="block text-sm font-medium text-gray-700 mb-2"> <FileText className="inline h-4 w-4 mr-1" /> Información Adicional </label> <textarea value={formData.information} onChange={(e) => handleChange('information', e.target.value)} rows="3" className="w-full p-3 border border-gray-300 rounded-lg bg-white text-gray-900 focus:ring-2 focus:ring-blue-500 focus:border-blue-500" placeholder="Información médica relevante, alergias, condiciones especiales, etc." disabled={isLoading} /> </div> </form> {/* Footer */} <div className="flex items-center justify-end space-x-3 p-6 border-t border-gray-200 bg-gray-50"> <button type="button" onClick={handleClose} className="px-4 py-2 text-gray-600 hover:text-gray-800 transition-colors" disabled={isLoading} > Cancelar </button> <button type="submit" onClick={handleSubmit} disabled={isLoading} className="flex items-center space-x-2 px-6 py-2 bg-blue-600 hover:bg-blue-700 disabled:bg-blue-400 text-white rounded-lg font-medium transition-colors" > {isLoading ? ( <> <div className="w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin"></div> <span>Guardando...</span> </> ) : ( <> <CheckCircle className="h-4 w-4" /> <span>Guardar Paciente</span> </> )} </button> </div> </div> </div> );
}; export default NewPatientModal;