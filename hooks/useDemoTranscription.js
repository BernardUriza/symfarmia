/**
 * Demo Transcription Hook - MAGIA PURA SIN AUDIO REAL
 * Sistema modular para diferentes casos m칠dicos simulados
 */

import { useState, useEffect, useRef } from 'react';

// ESTRATEGIAS DE DEMO MODULARES por especialidad
const DEMO_STRATEGIES = {
  'general_medicine': {
    name: 'Medicina General',
    icon: '游뽘',
    description: 'Consulta m칠dica est치ndar con s칤ntomas comunes',
    consultation: [
      'Paciente masculino de 35 a침os.',
      'Consulta por dolor tor치cico intermitente.',
      'Episodios de 2-3 minutos, sin relaci칩n con ejercicio.',
      'Stress laboral elevado 칰ltimas semanas.',
      'Fumador ocasional, 5 cigarrillos por semana.',
      'Sin antecedentes cardiovasculares familiares.',
      'Presi칩n arterial normal en consultas previas.',
      'Solicita evaluaci칩n cardiol칩gica.'
    ],
    analysis: [
      'S칤ntomas sugestivos de dolor at칤pico',
      'Factores de riesgo: stress, tabaquismo',
      'Probabilidad baja de s칤ndrome coronario',
      'Evaluaci칩n integral recomendada'
    ],
    recommendations: [
      'ECG de 12 derivaciones',
      'An치lisis b치sicos: glucosa, colesterol',
      'Manejo del stress laboral',
      'Cesaci칩n tab치quica gradual'
    ]
  },
  
  'cardiology': {
    name: 'Cardiolog칤a',
    icon: '仇벒잺',
    description: 'Especialidad cardiovascular con 칠nfasis en diagn칩stico',
    consultation: [
      'Paciente femenina de 58 a침os.',
      'Antecedentes de hipertensi칩n arterial.',
      'Episodios de palpitaciones nocturnas.',
      'Disnea de esfuerzo progresiva.',
      'Edema en miembros inferiores.',
      'Dolor precordial irradiado a brazo izquierdo.',
      'Factores de riesgo: obesidad, sedentarismo.',
      'Solicita evaluaci칩n cardiol칩gica completa.'
    ],
    analysis: [
      'S칤ndrome coronario agudo a descartar',
      'Signos de insuficiencia card칤aca',
      'M칰ltiples factores de riesgo cardiovascular',
      'Evaluaci칩n urgente requerida'
    ],
    recommendations: [
      'ECG urgente + troponinas',
      'Ecocardiograma transtor치cico',
      'Radiograf칤a de t칩rax',
      'BNP o NT-proBNP'
    ]
  },
  
  'pediatrics': {
    name: 'Pediatr칤a',
    icon: '游놌',
    description: 'Atenci칩n m칠dica especializada en menores',
    consultation: [
      'Paciente pedi치trico de 4 a침os.',
      'Fiebre de 38.5춿C por 3 d칤as.',
      'Tos seca y congesti칩n nasal.',
      'Irritabilidad y rechazo al alimento.',
      'V칩mitos ocasionales.',
      'Madre refiere contacto con caso COVID-19.',
      'Esquema de vacunaci칩n completo.',
      'Solicita evaluaci칩n pedi치trica.'
    ],
    analysis: [
      'S칤ndrome febril en preescolar',
      'S칤ntomas respiratorios altos',
      'Exposici칩n COVID-19 confirmada',
      'Evaluaci칩n integral necesaria'
    ],
    recommendations: [
      'Test r치pido COVID-19',
      'Manejo sintom치tico de fiebre',
      'Hidrataci칩n y aislamiento',
      'Control en 24-48 horas'
    ]
  },
  
  'hiv_pregnancy_adolescent': {
    name: 'VIH + Embarazo Adolescente',
    icon: '游뱛',
    description: 'Caso especial de poblaci칩n vulnerable cr칤tica',
    consultation: [
      'Paciente femenina de 17 a침os, embarazada de 24 semanas.',
      'Diagn칩stico de VIH positivo desde hace 6 meses.',
      'Carga viral detectada en 칰ltimo control.',
      'Consulta por adherencia al tratamiento antirretroviral.',
      'Refiere n치useas matutinas y fatiga extrema.',
      'Preocupaci칩n por transmisi칩n vertical al beb칠.',
      'Apoyo familiar limitado, situaci칩n socioecon칩mica precaria.',
      'Necesita orientaci칩n nutricional y psicol칩gica.'
    ],
    analysis: [
      'Se detectan factores de riesgo cr칤ticos',
      'Urgencia: Alta - Embarazo VIH+ adolescente',
      'Protocolo especializado requerido',
      'Equipo multidisciplinario necesario'
    ],
    recommendations: [
      'Monitoreo carga viral cada 4 semanas',
      'Suplementaci칩n nutricional espec칤fica',
      'Apoyo psicol칩gico continuo',
      'Coordinaci칩n infectolog칤a-obstetricia'
    ]
  },
  
  'quality_of_life': {
    name: 'Calidad de Vida',
    icon: '游눛',
    description: 'Enfoque hol칤stico en bienestar del paciente',
    consultation: [
      'Paciente masculino de 45 a침os.',
      'Refiere fatiga cr칩nica y p칠rdida de peso.',
      'Alimentaci칩n irregular, sin recursos para dieta balanceada.',
      'Insomnio y episodios de ansiedad frecuentes.',
      'Trabajo f칤sico demandante, sin seguro m칠dico.',
      '칔ltimo chequeo m칠dico hace 3 a침os.',
      'Antecedentes de diabetes en familia.',
      'Solicita orientaci칩n general de salud.'
    ],
    analysis: [
      'M칰ltiples factores de riesgo identificados',
      'Prioridad: Alta - Vulnerabilidad social',
      'Screening preventivo urgente',
      'Intervenci칩n nutricional necesaria'
    ],
    recommendations: [
      'Evaluaci칩n nutricional completa',
      'Screening de enfermedades cr칩nicas',
      'Programa de ejercicio adaptado',
      'Conectar con recursos comunitarios'
    ]
  }
};

export function useDemoTranscription(strategy = 'general_medicine') {
  const [selectedSpecialty, setSelectedSpecialty] = useState(null);
  const [showSpecialtyConfirmation, setShowSpecialtyConfirmation] = useState(false);
  const [consultationGenerated, setConsultationGenerated] = useState(false);
  const [isRecording, setIsRecording] = useState(false);
  const [demoText, setDemoText] = useState('');
  const [currentAnalysis, setCurrentAnalysis] = useState([]);
  const [recommendations, setRecommendations] = useState([]);
  const [recordingTime, setRecordingTime] = useState(0);
  const [confidence, setConfidence] = useState(0);
  const [isAnalyzing, setIsAnalyzing] = useState(false);
  
  const intervalRef = useRef(null);
  const timeoutRef = useRef(null);
  // Track all demo timeouts for proper cleanup to avoid memory leaks
  const timeoutsRef = useRef([]);
  const demoStrategy = DEMO_STRATEGIES[strategy] || DEMO_STRATEGIES['general_medicine'];

  const selectSpecialty = (specialty) => {
    setSelectedSpecialty(specialty);
    setShowSpecialtyConfirmation(true);
    
    // Track analytics
    trackConsultationEvent('specialty_selected', { specialty });
  };
  
  const confirmSpecialtyAndGenerate = () => {
    if (!selectedSpecialty) return;
    
    setShowSpecialtyConfirmation(false);
    setConsultationGenerated(true);
    
    // Track analytics
    trackConsultationEvent('consultation_generated', { specialty: selectedSpecialty });
    
    // Start the automatic consultation generation
    startDemoRecording();
  };
  
  const trackConsultationEvent = (event, metadata = {}) => {
    // Generate session ID if not exists
    if (!sessionStorage.getItem('consultation_session_id')) {
      sessionStorage.setItem('consultation_session_id', Date.now().toString());
    }
    
    const analyticsData = {
      sessionId: sessionStorage.getItem('consultation_session_id'),
      event,
      specialty: selectedSpecialty,
      location: 'transcription_panel',
      metadata: {
        ...metadata,
        timestamp: new Date().toISOString(),
        userAgent: navigator.userAgent
      }
    };
    
    // Send to analytics endpoint
    fetch('/api/analytics/consultation', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(analyticsData)
    }).catch(console.error);
  };
  
  const startDemoRecording = () => {
    if (isRecording) return;
    
    setIsRecording(true);
    setDemoText('');
    setCurrentAnalysis([]);
    setRecommendations([]);
    setRecordingTime(0);
    setConfidence(0);
    setIsAnalyzing(false);
    
    // Track recording start
    trackConsultationEvent('recording_started');

    // Timer para duraci칩n de grabaci칩n
    intervalRef.current = setInterval(() => {
      setRecordingTime(prev => prev + 1);
    }, 1000);

    // Simulaci칩n de transcripci칩n en tiempo real
    let currentIndex = 0;
    const consultation = demoStrategy.consultation;
    
    const addNextSentence = () => {
      if (currentIndex < consultation.length && isRecording) {
        const sentence = consultation[currentIndex];
        setDemoText(prev => prev + (prev ? ' ' : '') + sentence);
        setConfidence(typeof window !== 'undefined' ? 0.85 + Math.random() * 0.1 : 0.9); // 85-95% confidence SOLO CLIENT
        currentIndex++;
        
        // Tiempo variable entre oraciones (1.5-3 segundos) - SOLO CLIENT SIDE
        const nextDelay = typeof window !== 'undefined' ? 1500 + Math.random() * 1500 : 2000;
        timeoutsRef.current.push(setTimeout(addNextSentence, nextDelay));
        
        // Iniciar an치lisis despu칠s de la tercera oraci칩n
        if (currentIndex === 3) {
          startAnalysis();
        }
      }
    };

    // Comenzar transcripci칩n despu칠s de un peque침o delay
    timeoutsRef.current.push(setTimeout(addNextSentence, 800));
  };

  const startAnalysis = () => {
    setIsAnalyzing(true);
    
    const analysis = demoStrategy.analysis;
    let analysisIndex = 0;
    
    const addAnalysisPoint = () => {
      if (analysisIndex < analysis.length) {
        setCurrentAnalysis(prev => [...prev, analysis[analysisIndex]]);
        analysisIndex++;
        timeoutsRef.current.push(setTimeout(addAnalysisPoint, 2000));
      } else {
        // Agregar recomendaciones despu칠s del an치lisis
        timeoutsRef.current.push(setTimeout(() => {
          setRecommendations(demoStrategy.recommendations);
          setIsAnalyzing(false);
        }, 1500));
      }
    };

    timeoutsRef.current.push(setTimeout(addAnalysisPoint, 1000));
  };

  const stopDemoRecording = () => {
    setIsRecording(false);
    setIsAnalyzing(false);
    
    // MEMORY LEAK FIX: More defensive cleanup
    if (intervalRef.current) {
      clearInterval(intervalRef.current);
      intervalRef.current = null;
    }
    
    if (timeoutRef.current) {
      clearTimeout(timeoutRef.current);
      timeoutRef.current = null;
    }
    
    // Clear all scheduled timeouts - ENHANCED
    timeoutsRef.current.forEach((timeoutId) => {
      if (timeoutId) clearTimeout(timeoutId);
    });
    timeoutsRef.current = [];
  };

  const resetDemo = () => {
    // MEMORY LEAK FIX: Enhanced reset with comprehensive cleanup
    stopDemoRecording();
    
    // Reset all state
    setDemoText('');
    setCurrentAnalysis([]);
    setRecommendations([]);
    setRecordingTime(0);
    setConfidence(0);
    setSelectedSpecialty(null);
    setShowSpecialtyConfirmation(false);
    setConsultationGenerated(false);
    
    // Additional safety cleanup
    if (intervalRef.current) {
      clearInterval(intervalRef.current);
      intervalRef.current = null;
    }
    timeoutsRef.current.forEach(t => t && clearTimeout(t));
    timeoutsRef.current = [];
  };

  // MEMORY LEAK FIX: Comprehensive cleanup on unmount
  useEffect(() => {
    return () => {
      // Force stop recording to ensure all cleanup
      setIsRecording(false);
      setIsAnalyzing(false);
      
      if (intervalRef.current) {
        clearInterval(intervalRef.current);
        intervalRef.current = null;
      }
      
      if (timeoutRef.current) {
        clearTimeout(timeoutRef.current);
        timeoutRef.current = null;
      }
      
      // Clear all timeouts with null check
      timeoutsRef.current.forEach((timeoutId) => {
        if (timeoutId) clearTimeout(timeoutId);
      });
      timeoutsRef.current = [];
    };
  }, []);

  return {
    // Estado
    isRecording,
    demoText,
    currentAnalysis,
    recommendations,
    recordingTime,
    confidence,
    isAnalyzing,
    selectedSpecialty,
    showSpecialtyConfirmation,
    consultationGenerated,
    
    // Acciones
    startDemoRecording,
    stopDemoRecording,
    resetDemo,
    selectSpecialty,
    confirmSpecialtyAndGenerate,
    
    // Info de estrategia
    strategyName: demoStrategy.name,
    availableStrategies: Object.keys(DEMO_STRATEGIES),
    availableSpecialties: DEMO_STRATEGIES
  };
}

export default useDemoTranscription;