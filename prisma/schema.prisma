// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Patient {
  /// Core existing fields
  id         Int       @id @default(autoincrement())
  name       String
  email      String
  phone      String
  information String @db.Text
  dateOfBirth DateTime
  gender     Gender
  status     String
  createdAt  DateTime  @default(now())

  /// Extended demographics
  firstName    String?
  lastName     String?
  documentType DocumentType @default(CEDULA)
  documentNumber String?  @unique
  address      Json?

  /// Medical info
  bloodType    BloodType?
  allergies         String[]
  chronicConditions String[]

  /// Emergency contact
  emergencyContactName         String?
  emergencyContactRelationship String?
  emergencyContactPhone        String?

  /// Misc
  avatarUrl String?
  isActive Boolean @default(true)

  medicalReports MedicalReport[]
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum DocumentType {
  CEDULA
  PASAPORTE
  TARJETA_IDENTIDAD
}

enum BloodType {
  A_POSITIVE
  A_NEGATIVE
  B_POSITIVE
  B_NEGATIVE
  AB_POSITIVE
  AB_NEGATIVE
  O_POSITIVE
  O_NEGATIVE
  UNKNOWN
}
model MedicalReport {
  id         Int       @id @default(autoincrement())
  name String
  status  String
  diagnosis  String?
  date  DateTime
  expirationDate DateTime?
  createdAt  DateTime  @default(now())
  patientId Int
  patient    Patient   @relation(fields: [patientId], references: [id])
  studies Study[]
  // Otros campos relevantes para tu informe m√©dico
}

model Category {
  id           Int       @id @default(autoincrement())
  name         String
  studyTypes StudyType[]
}

model StudyType {
  id           Int       @id @default(autoincrement())
  name         String
  description  String
  categoryId Int
  category    Category?  @relation(fields: [categoryId], references: [id]) 
  studies Study[]
}

model Study {
  id         Int       @id @default(autoincrement())
  name String
  title String
  medicalReportId Int
  createdAt  DateTime  @default(now())
  studyTypeId Int
  type    StudyType?  @relation(fields: [studyTypeId], references: [id]) 
  medicalReport    MedicalReport?  @relation(fields: [medicalReportId], references: [id], onDelete: Cascade) 
  // Otros campos relevantes para tu estudio
}

// Analytics tracking for consultation interactions
model ConsultationAnalytics {
  id           Int      @id @default(autoincrement())
  sessionId    String   // Unique session identifier
  userId       String?  // Optional user identifier
  event        String   // Event type: 'specialty_selected', 'consult_generated', 'recording_started', etc.
  specialty    String?  // Medical specialty selected
  location     String?  // UI location of interaction
  metadata     Json?    // Additional event data
  timestamp    DateTime @default(now())
  userAgent    String?  // Browser info
  ipAddress    String?  // IP address (anonymized)
  
  @@map("consultation_analytics")
}
model User {
  id    String @id @default(cuid())
  email String @unique
  name  String
  picture String?
  role   String?
  customAssistant CustomAssistant?
}

model CustomAssistant {
  id           String   @id @default(cuid())
  name         String
  description  String?
  instructions String
  isActive     Boolean  @default(true)

  userId       String
  user         User     @relation(fields: [userId], references: [id])

  modelProvider String   @default("openai")
  modelName     String   @default("gpt-4o")
  temperature   Float    @default(0.3)
  maxTokens     Int      @default(1000)

  attachments   AssistantFile[]
  conversations AssistantConversation[]

  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  lastUsedAt    DateTime?
  usageCount    Int      @default(0)

  @@unique([userId])
  @@map("custom_assistants")
}

model AssistantFile {
  id           String   @id @default(cuid())
  fileName     String
  originalName String
  fileSize     Int
  mimeType     String
  fileUrl      String

  extractedText String?
  fileType      String

  assistantId   String
  assistant     CustomAssistant @relation(fields: [assistantId], references: [id], onDelete: Cascade)

  createdAt     DateTime @default(now())

  @@map("assistant_files")
}

model AssistantConversation {
  id          String   @id @default(cuid())
  title       String?

  assistantId String
  assistant   CustomAssistant @relation(fields: [assistantId], references: [id], onDelete: Cascade)

  messages    AssistantMessage[]

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  isArchived  Boolean  @default(false)

  @@map("assistant_conversations")
}

model AssistantMessage {
  id             String   @id @default(cuid())
  role           String
  content        String
  modelUsed      String?
  tokensUsed     Int?
  responseTime   Int?
  fallbackUsed   Boolean  @default(false)

  conversationId String
  conversation   AssistantConversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  createdAt      DateTime @default(now())

  @@map("assistant_messages")
}

